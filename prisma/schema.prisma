datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Network {
  ETHEREUM
  ROPSTEN
}

enum LockId {
  NEWER_SWAPS
  OLDER_SWAPS
  PRICES_HISTORIC
  SWAP_DETAILS
  SWAP_LOGS
  SWAP_STATUS
}

enum SwapStatus {
  PENDING
  COMPLETED
  FAILED
}

model Locks {
  id      LockId
  network Network
  at      DateTime

  @@id([id, network])
}

model Token {
  id       String  @id
  network  Network
  address  String
  decimals Int     @db.SmallInt
  symbol   String
  logoUri  String?

  priceHistoryUpdatedAt DateTime @default(now())
  logoUpdatedAt         DateTime @default(now())

  usdPriceHistoric TokenUsdPriceHistoric[] @relation("TokenUsdPriceHistoric")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  swapsSrc  Swap[] @relation("SwapSrcToken")
  swapsDest Swap[] @relation("SwapDestToken")

  @@unique([network, address])
  @@index([network, address])
}

model TokenUsdPriceHistoric {
  tokenId String
  token   Token    @relation("TokenUsdPriceHistoric", fields: [tokenId], references: [id])
  at      DateTime
  price   Decimal  @db.Decimal(65, 20)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tokenId, at])
}

model Swap {
  id      String     @id
  network Network
  status  SwapStatus @default(PENDING)

  initiatorAddress   String
  beneficiaryAddress String

  srcTokenId  String
  srcToken    Token   @relation("SwapSrcToken", fields: [srcTokenId], references: [id])
  srcAmount   Decimal @db.Decimal(65, 20)
  destTokenId String
  destToken   Token   @relation("SwapDestToken", fields: [destTokenId], references: [id])
  destAmount  Decimal @db.Decimal(65, 20)

  rawRouteData String

  skypoolsTransactionHashes String[]
  skybridgeSwapId           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
