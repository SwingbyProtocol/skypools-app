### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
A timestamp.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime]
}

"""
A number without precision limits.
"""
scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: DecimalFilter
  notIn: [Decimal]
}

type ForwardPaginationPageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

input IdFilter {
  equals: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  not: IdFilter
  notIn: [ID]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int]
}

enum Network {
  BSC
  ETHEREUM
  POLYGON
}

input NetworkEnumFilter {
  equals: Network
  in: [Network]
  not: NetworkEnumFilter
  notIn: [Network]
}

type PriceHistoricItem {
  at: DateTime!
  price: Decimal!
}

type Query {
  priceHistoric(
    """
    ID of the first token.
    """
    firstTokenId: String!

    """
    Optional ID of the second token. USD will be used if no token is provided.
    """
    secondTokenId: String
  ): [PriceHistoricItem!]!
  token(id: ID!): Token!
  tokens(
    """
    Only items coming immediately after this will be returned. Can be combined with "first".
    """
    after: String

    """
    Only items coming immediately after this will be returned. Can be combined with "last".
    """
    before: String

    """
    Limits the number of items that are retuned. Can be combined with "after".
    """
    first: Int

    """
    Limits the number of items that are retuned. Can be combined with "before".
    """
    last: Int

    """
    Allows to filter results by several properties.
    """
    where: TokenWhereInput
  ): TokensConnection!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: StringFilterMode
  not: StringFilter
  notIn: [String]
  startsWith: String
}

enum StringFilterMode {
  default
  insensitive
}

type Token {
  address: String!
  createdAt: DateTime!
  decimals: Int!
  id: String!
  logoUri: String
  network: Network!
  symbol: String!
  updatedAt: DateTime!
}

input TokenWhereInput {
  AND: [TokenWhereInput]
  NOT: [TokenWhereInput]
  OR: [TokenWhereInput]
  createdAt: DateTimeFilter
  decimals: IntFilter
  id: StringFilter
  logoUri: StringFilter
  network: NetworkEnumFilter
  symbol: StringFilter
  updatedAt: DateTimeFilter
}

type TokensConnection {
  edges: [TokensConnectionEdges!]!
  pageInfo: ForwardPaginationPageInfo!
  totalCount: Int!
}

type TokensConnectionEdges {
  cursor: String!
  node: Token!
}
